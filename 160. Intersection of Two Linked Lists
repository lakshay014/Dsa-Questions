Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
If the two linked lists have no intersection at all, return null.

Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'


class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
    {
        if(headA==NULL)
        return NULL;

        if(headB==NULL)
        return NULL;

        ListNode *temp1=headA;
        ListNode *temp2=headB;

        while(temp1!=temp2)
        {
            if(temp1==NULL)
            temp1=headB;
            else if(temp1!=NULL)
            temp1=temp1->next;


            if(temp2==NULL)
            temp2=headA;
            else if(temp2!=NULL)
            temp2=temp2->next;
        }
        return temp1;
        
    }
};



or 


class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
    {
        if(headA==NULL)
        return NULL;

        if(headB==NULL)
        return NULL;

        ListNode *temp1=headA;
        ListNode *temp2=headB;

        while(temp1!=temp2)
        {
            temp1=temp1==NULL?headB:temp1->next;
            temp2=temp2==NULL?headA:temp2->next;
        }
        return temp1;
        
    }
};
