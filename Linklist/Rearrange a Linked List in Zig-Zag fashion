Given a linked list, rearrange it such that the converted list should be of the form a < b > c < d > e < f … where a, b, c… are consecutive data nodes of the linked list.

Examples: 

Input:  1->2->3->4
Output: 1->3->2->4 
Explanation : 1 and 3 should come first before 2 and 4 in zig-zag fashion, So resultant linked-list will be 1->3->2->4. 

Input:  11->15->20->5->10
Output: 11->20->5->15->10 




void zigZagList(Node* head)
{
    // If flag is true, then next node should be greater in
    // the desired output.
    bool flag = true;
 
    // Traverse linked list starting from head.
    Node* current = head;
    while (current->next != NULL) {
        if (flag) /* "<" relation expected */
        {
            // If we have a situation like A > B > C where
            // A, B and C are consecutive Nodes in list we
            // get A > B < C by swapping B and C
            if (current->data > current->next->data)
                swap(current->data, current->next->data);
        }
        else /* ">" relation expected */
        {
            // If we have a situation like A < B < C where
            // A, B and C  are consecutive Nodes in list we
            // get A < C > B by swapping B and C
            if (current->data < current->next->data)
                swap(current->data, current->next->data);
        }
 
        current = current->next;
        flag = !flag; /* flip flag for reverse checking */
    }
}


