Sort the given biotonic doubly linked list. A biotonic doubly linked list is a doubly linked list which is first increasing and then decreasing. 
A strictly increasing or a strictly decreasing list is also a biotonic doubly linked list.


Sample Input 1:
3
1 5 8 4 2 -1
9 10 -1
4 3 -1
Sample Output 1:
1 2 4 5 8 -1
9 10 -1
3 4 -1


Sample Input 2:
2
1 4 4 3 2 -1
5
1 1 1 1 1 -1
Sample Output 2:
1 2 3 4 4 -1
1 1 1 1 1 -1


void reverse(struct Node* head_ref)
{
    struct Node* temp = NULL;
    struct Node* current = *head_ref;
 
    // swap next and prev for all nodes
    // of doubly linked list
    while (current != NULL) {
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
        current = current->prev;
    }
 
    // Before changing head, check for the cases
    // like empty list and list with only one node
    if (temp != NULL)
        head_ref = temp->prev;
}
 
// Function to merge two sorted doubly linked lists
struct Node* merge(struct Node* first, struct Node* second)
{
    // If first linked list is empty
    if (!first)
        return second;
 
    // If second linked list is empty
    if (!second)
        return first;
 
    // Pick the smaller value
    if (first->data < second->data) {
        first->next = merge(first->next, second);
        first->next->prev = first;
        first->prev = NULL;
        return first;
    } else {
        second->next = merge(first, second->next);
        second->next->prev = second;
        second->prev = NULL;
        return second;
    }
}
 
// function to sort a biotonic doubly linked list
struct Node* sort(struct Node* head)
{
    // if list is empty or if it contains a single
    // node only
    if (head == NULL || head->next == NULL)
        return head;
 
    struct Node* current = head->next;
 
    while (current != NULL) {
 
        // if true, then 'current' is the first node
        // which is smaller than its previous node
        if (current->data < current->prev->data)
            break;
 
        // move to the next node
        current = current->next;
    }
 
    // if true, then list is already sorted
    if (current == NULL)
        return head;
 
    // split into two lists, one starting with 'head'
    // and other starting with 'current'
    current->prev->next = NULL;
    current->prev = NULL;
 
    // reverse the list starting with 'current'
    reverse(Â¤t);
 
    // merge the two lists and return the
    // final merged doubly linked list
    return merge(head, current);
}


Tc =0(n);
