Given a linked list where in addition to the next pointer, each node has a child pointer, which may or may not point to a separate list.
These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in below figure.
You are given the head of the first level of the list. Flatten the list so that all the nodes appear in a single-level linked list.
You need to flatten the list in way that all nodes at the first level should come first,
then nodes of second level, and so on.




void flattenList(Node *head)
{
    /*Base case*/
    if (head == NULL)
    return;
 
    Node *tmp;
 
    /* Find tail node of first level linked list */
    Node *tail = head;
    while (tail->next != NULL)
        tail = tail->next;
 
    // One by one traverse through all nodes of first level
    // linked list till we reach the tail node
    Node *cur = head;
    while (cur != tail)
    {
        // If current node has a child
        if (cur->child)
        {
            // then append the child at the end of current list
            tail->next = cur->child;
 
            // and update the tail to new last node
            tmp = cur->child;
            while (tmp->next)
                tmp = tmp->next;
            tail = tmp;
        }
 
        // Change current node
        cur = cur->next;
    }
}
